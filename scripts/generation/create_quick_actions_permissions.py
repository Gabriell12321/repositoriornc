#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para criar sistema de permiss√µes para A√ß√µes R√°pidas
"""

import sqlite3
import datetime

def create_quick_actions_permissions_table():
    """Cria a tabela para gerenciar permiss√µes das a√ß√µes r√°pidas."""
    try:
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        # Criar tabela de a√ß√µes r√°pidas
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quick_actions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                action_key TEXT UNIQUE NOT NULL,
                action_name TEXT NOT NULL,
                action_description TEXT,
                button_html TEXT,
                icon TEXT,
                url TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Criar tabela de permiss√µes das a√ß√µes r√°pidas
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quick_action_permissions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                action_key TEXT NOT NULL,
                group_id INTEGER NOT NULL,
                permission_level TEXT DEFAULT 'view',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (group_id) REFERENCES groups(id),
                UNIQUE(action_key, group_id)
            )
        ''')
        
        print("‚úÖ Tabelas de permiss√µes criadas com sucesso!")
        
        # Inserir as a√ß√µes r√°pidas existentes
        actions = [
            {
                'key': 'manage_users',
                'name': 'üë• Gerenciar Usu√°rios',
                'description': 'Acessar o painel de gerenciamento de usu√°rios',
                'icon': 'üë•',
                'url': '/admin/users'
            },
            {
                'key': 'manage_groups',
                'name': 'üë• Gerenciar Grupos',
                'description': 'Acessar o painel de gerenciamento de grupos',
                'icon': 'üë•',
                'url': '/admin/groups'
            },
            {
                'key': 'manage_permissions',
                'name': 'üîê Gerenciar Permiss√µes',
                'description': 'Acessar o painel de gerenciamento de permiss√µes',
                'icon': 'üîê',
                'url': '/admin/permissions'
            },
            {
                'key': 'manage_clients',
                'name': 'üè∑Ô∏è Cadastro de Clientes',
                'description': 'Acessar o cadastro de clientes',
                'icon': 'üè∑Ô∏è',
                'url': '/admin/clients'
            },
            {
                'key': 'manage_operators',
                'name': '‚è±Ô∏è Cadastro de Operador',
                'description': 'Acessar o cadastro de operadores',
                'icon': '‚è±Ô∏è',
                'url': '/admin/operators'
            },
            {
                'key': 'manage_areas',
                'name': 'üß≠ Cadastro de √Årea',
                'description': 'Acessar o cadastro de √°reas',
                'icon': 'üß≠',
                'url': '/admin/areas'
            },
            {
                'key': 'generate_report',
                'name': 'üìä Gerar Relat√≥rio',
                'description': 'Gerar relat√≥rios do sistema',
                'icon': 'üìä',
                'url': '/reports'
            },
            {
                'key': 'employee_expenses',
                'name': 'üí∞ Gastos por Funcion√°rio',
                'description': 'Visualizar gastos por funcion√°rio',
                'icon': 'üí∞',
                'url': '/reports/employee-expenses'
            }
        ]
        
        for action in actions:
            cursor.execute('''
                INSERT OR IGNORE INTO quick_actions 
                (action_key, action_name, action_description, icon, url)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                action['key'],
                action['name'],
                action['description'],
                action['icon'],
                action['url']
            ))
        
        conn.commit()
        print(f"‚úÖ {len(actions)} a√ß√µes r√°pidas inseridas!")
        
        # Mostrar grupos dispon√≠veis
        cursor.execute('SELECT id, name, description FROM groups ORDER BY name')
        groups = cursor.fetchall()
        
        print(f"\nüìä GRUPOS DISPON√çVEIS:")
        for group in groups:
            print(f"  ID: {group[0]}, Nome: {group[1]}, Descri√ß√£o: {group[2]}")
        
        # Mostrar a√ß√µes cadastradas
        cursor.execute('SELECT action_key, action_name, action_description FROM quick_actions ORDER BY action_name')
        registered_actions = cursor.fetchall()
        
        print(f"\n‚ö° A√á√ïES R√ÅPIDAS CADASTRADAS:")
        for action in registered_actions:
            print(f"  Chave: {action[0]}")
            print(f"  Nome: {action[1]}")
            print(f"  Descri√ß√£o: {action[2]}")
            
            # Verificar permiss√µes existentes
            cursor.execute('''
                SELECT g.name, qap.permission_level
                FROM quick_action_permissions qap
                JOIN groups g ON qap.group_id = g.id
                WHERE qap.action_key = ?
            ''', (action[0],))
            permissions = cursor.fetchall()
            
            if permissions:
                print(f"  Permiss√µes:")
                for perm in permissions:
                    print(f"    - Grupo: {perm[0]} ({perm[1]})")
            else:
                print(f"  Permiss√µes: Nenhuma (n√£o aparece para ningu√©m)")
            print()
        
        conn.close()
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå Erro SQLite: {e}")
        return False

def add_permission_example():
    """Adiciona exemplos de permiss√µes para demonstrar o sistema."""
    try:
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        print("\n" + "=" * 70)
        print("ADICIONANDO PERMISS√ïES DE EXEMPLO")
        print("=" * 70)
        
        # Exemplo: Dar permiss√£o de "Gerar Relat√≥rio" para o grupo TI
        cursor.execute('SELECT id FROM groups WHERE name = "TI"')
        ti_group = cursor.fetchone()
        
        if ti_group:
            cursor.execute('''
                INSERT OR IGNORE INTO quick_action_permissions 
                (action_key, group_id, permission_level)
                VALUES (?, ?, ?)
            ''', ('generate_report', ti_group[0], 'view'))
            
            cursor.execute('''
                INSERT OR IGNORE INTO quick_action_permissions 
                (action_key, group_id, permission_level)
                VALUES (?, ?, ?)
            ''', ('manage_permissions', ti_group[0], 'view'))
            
            print("‚úÖ Permiss√µes adicionadas para grupo TI:")
            print("   - Gerar Relat√≥rio")
            print("   - Gerenciar Permiss√µes")
        
        # Exemplo: Dar permiss√£o para grupo Administrador (se existir)
        cursor.execute('SELECT id FROM groups WHERE name = "Administrador"')
        admin_group = cursor.fetchone()
        
        if admin_group:
            # Dar todas as permiss√µes para admin
            cursor.execute('SELECT action_key FROM quick_actions')
            all_actions = cursor.fetchall()
            
            for action in all_actions:
                cursor.execute('''
                    INSERT OR IGNORE INTO quick_action_permissions 
                    (action_key, group_id, permission_level)
                    VALUES (?, ?, ?)
                ''', (action[0], admin_group[0], 'admin'))
            
            print(f"‚úÖ Todas as permiss√µes adicionadas para grupo Administrador")
        
        conn.commit()
        conn.close()
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå Erro SQLite: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("=" * 70)
    print("CRIA√á√ÉO DO SISTEMA DE PERMISS√ïES PARA A√á√ïES R√ÅPIDAS")
    print("=" * 70)
    print("Este sistema permite controlar quais grupos podem ver cada a√ß√£o r√°pida.")
    print("Por padr√£o, nenhuma a√ß√£o aparece at√© que seja dada permiss√£o expl√≠cita.")
    print("=" * 70)
    
    # Criar estrutura
    if create_quick_actions_permissions_table():
        add_permission_example()
        
        print("\n" + "=" * 70)
        print("‚úÖ SISTEMA DE PERMISS√ïES CRIADO COM SUCESSO!")
        print("=" * 70)
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Acessar /admin/quick-actions-permissions para gerenciar permiss√µes")
        print("2. Por padr√£o, as a√ß√µes n√£o aparecem para ningu√©m")
        print("3. Configure as permiss√µes para cada grupo conforme necess√°rio")
        print("\nüí° COMO FUNCIONA:")
        print("- Apenas usu√°rios dos grupos com permiss√£o ver√£o as a√ß√µes")
        print("- A√ß√µes sem permiss√£o n√£o aparecem no dashboard")
        print("- Sistema seguro por padr√£o (nada aparece sem permiss√£o)")
    else:
        print("\n‚ùå FALHA AO CRIAR SISTEMA DE PERMISS√ïES")

if __name__ == "__main__":
    main()
