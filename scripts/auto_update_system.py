#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de atualiza√ß√£o autom√°tica
Executa atualiza√ß√µes peri√≥dicas dos dados e relat√≥rios
"""

import time
import schedule
import threading
from datetime import datetime
import os
import sys

def run_update_scripts():
    """Executar scripts de atualiza√ß√£o"""
    
    print(f"\nüîÑ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Executando atualiza√ß√µes...")
    
    try:
        # Executar script de atualiza√ß√£o de gr√°ficos e relat√≥rios
        os.system('python update_charts_and_reports.py')
        print("‚úÖ Atualiza√ß√µes executadas com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante atualiza√ß√£o: {e}")

def start_scheduler():
    """Iniciar agendador de tarefas"""
    
    print("üöÄ Iniciando sistema de atualiza√ß√£o autom√°tica...")
    print("üìÖ Agendamentos configurados:")
    print("   - A cada 30 minutos: Atualiza√ß√£o de dados")
    print("   - A cada 2 horas: Atualiza√ß√£o completa")
    print("   - Diariamente √†s 06:00: Atualiza√ß√£o completa")
    print("   - Diariamente √†s 18:00: Atualiza√ß√£o completa")
    print("\n‚è∞ Sistema rodando... (Ctrl+C para parar)")
    
    # Agendar tarefas
    schedule.every(30).minutes.do(run_update_scripts)
    schedule.every(2).hours.do(run_update_scripts)
    schedule.every().day.at("06:00").do(run_update_scripts)
    schedule.every().day.at("18:00").do(run_update_scripts)
    
    # Executar uma vez imediatamente
    run_update_scripts()
    
    # Loop principal
    while True:
        schedule.run_pending()
        time.sleep(60)  # Verificar a cada minuto

def manual_update():
    """Executar atualiza√ß√£o manual"""
    
    print("üîÑ Executando atualiza√ß√£o manual...")
    run_update_scripts()
    print("‚úÖ Atualiza√ß√£o manual conclu√≠da!")

def show_status():
    """Mostrar status do sistema"""
    
    print("üìä STATUS DO SISTEMA")
    print("="*40)
    
    # Verificar se os arquivos de dados existem
    files_to_check = [
        'ippel_system.db',
        'static/dashboard_data.json',
        'static/last_update.txt'
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            modified = datetime.fromtimestamp(os.path.getmtime(file_path))
            print(f"‚úÖ {file_path}")
            print(f"   üìè Tamanho: {size:,} bytes")
            print(f"   üïí Modificado: {modified.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print(f"‚ùå {file_path} - N√£o encontrado")
        print()

def main():
    """Fun√ß√£o principal"""
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'manual':
            manual_update()
        elif command == 'status':
            show_status()
        elif command == 'start':
            start_scheduler()
        else:
            print("‚ùå Comando inv√°lido!")
            print("Comandos dispon√≠veis:")
            print("  python auto_update_system.py manual  - Executar atualiza√ß√£o manual")
            print("  python auto_update_system.py status  - Mostrar status do sistema")
            print("  python auto_update_system.py start   - Iniciar agendador autom√°tico")
    else:
        print("üîÑ Sistema de Atualiza√ß√£o Autom√°tica IPPEL")
        print("="*50)
        print("Comandos dispon√≠veis:")
        print("  python auto_update_system.py manual  - Executar atualiza√ß√£o manual")
        print("  python auto_update_system.py status  - Mostrar status do sistema")
        print("  python auto_update_system.py start   - Iniciar agendador autom√°tico")
        print()
        print("üí° Dica: Use 'python auto_update_system.py start' para iniciar o sistema autom√°tico")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Sistema interrompido pelo usu√°rio")
        print("‚úÖ Atualiza√ß√µes autom√°ticas paradas")
