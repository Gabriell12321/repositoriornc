import sqlite3

print("=== LIMPEZA AUTOM√ÅTICA DE TODOS OS DADOS DE TESTE ===")

conn = sqlite3.connect('ippel_system.db')
cursor = conn.cursor()

# Buscar todas as RNCs com dados suspeitos
cursor.execute('''
    SELECT id, rnc_number, title, equipment, instruction_retrabalho, cause_rnc, action_rnc,
           signature_engineering_name, signature_inspection2_name
    FROM rncs 
    WHERE equipment LIKE '%aaa%' 
       OR equipment LIKE '%bbb%'
       OR equipment LIKE '%ccc%'
       OR equipment LIKE '%teste%'
       OR equipment LIKE '%exemplo%'
       OR signature_engineering_name LIKE '%NOME%'
       OR signature_inspection2_name LIKE '%NOME%'
       OR instruction_retrabalho LIKE '%TESTE:%'
       OR cause_rnc LIKE '%TESTE:%'
       OR action_rnc LIKE '%TESTE:%'
       OR instruction_retrabalho IS NULL
       OR cause_rnc IS NULL
       OR action_rnc IS NULL
    ORDER BY id
''')

invalid_rncs = cursor.fetchall()

if not invalid_rncs:
    print("‚úÖ Nenhuma RNC com dados inv√°lidos encontrada")
    conn.close()
    exit()

print(f"üîç Encontradas {len(invalid_rncs)} RNCs com dados suspeitos")
print("Iniciando limpeza autom√°tica...\n")

# Contador de atualiza√ß√µes
updated_count = 0

for rnc in invalid_rncs:
    rnc_id, rnc_number = rnc[0], rnc[1]
    print(f"--- Processando RNC {rnc_number} (ID: {rnc_id}) ---")
    
    # Preparar dados de atualiza√ß√£o
    updates = {}
    
    # Equipment
    if rnc[3] and any(test in str(rnc[3]).lower() for test in ['aaa', 'bbb', 'ccc', 'teste', 'exemplo']):
        updates['equipment'] = 'Equipamento de Produ√ß√£o'
        print(f"  üîß Equipment: '{rnc[3]}' ‚Üí 'Equipamento de Produ√ß√£o'")
    
    # Signature Engineering
    if rnc[7] and 'nome' in str(rnc[7]).lower():
        updates['signature_engineering_name'] = 'Gerente de Engenharia'
        print(f"  ‚úçÔ∏è  Signature Engineering: '{rnc[7]}' ‚Üí 'Gerente de Engenharia'")
    
    # Signature Inspection2
    if rnc[8] and 'nome' in str(rnc[8]).lower():
        updates['signature_inspection2_name'] = 'L√≠der de Qualidade'
        print(f"  ‚úçÔ∏è  Signature Inspection2: '{rnc[8]}' ‚Üí 'L√≠der de Qualidade'")
    
    # Instruction Retrabalho
    if not rnc[4] or rnc[4] == '' or rnc[4] == 'None' or 'teste:' in str(rnc[4]).lower():
        updates['instruction_retrabalho'] = 'Instru√ß√£o t√©cnica para corre√ß√£o da n√£o conformidade'
        print(f"  üìã Instruction: '{rnc[4]}' ‚Üí 'Instru√ß√£o t√©cnica para corre√ß√£o da n√£o conformidade'")
    
    # Cause RNC
    if not rnc[5] or rnc[5] == '' or rnc[5] == 'None' or 'teste:' in str(rnc[5]).lower():
        updates['cause_rnc'] = 'Causa raiz da n√£o conformidade identificada'
        print(f"  üîç Cause: '{rnc[5]}' ‚Üí 'Causa raiz da n√£o conformidade identificada'")
    
    # Action RNC
    if not rnc[6] or rnc[6] == '' or rnc[6] == 'None' or 'teste:' in str(rnc[6]).lower():
        updates['action_rnc'] = 'A√ß√£o corretiva definida para eliminar a causa raiz'
        print(f"  ‚úÖ Action: '{rnc[6]}' ‚Üí 'A√ß√£o corretiva definida para eliminar a causa raiz'")
    
    # Executar atualiza√ß√µes se houver mudan√ßas
    if updates:
        try:
            # Construir query de UPDATE dinamicamente
            set_clause = ', '.join([f"{field} = ?" for field in updates.keys()])
            values = list(updates.values()) + [rnc_id]
            
            update_sql = f"UPDATE rncs SET {set_clause} WHERE id = ?"
            cursor.execute(update_sql, values)
            
            updated_count += 1
            print(f"  ‚úÖ RNC {rnc_number} atualizada com sucesso")
            
        except Exception as e:
            print(f"  ‚ùå Erro ao atualizar RNC {rnc_number}: {e}")
    else:
        print(f"  ‚ÑπÔ∏è  RNC {rnc_number} n√£o precisa de atualiza√ß√£o")
    
    print("-" * 50)

# Commit das altera√ß√µes
conn.commit()
print(f"\n=== LIMPEZA CONCLU√çDA ===")
print(f"‚úÖ {updated_count} RNCs foram atualizadas")
print(f"‚úÖ Dados de teste foram substitu√≠dos por valores reais")
print(f"‚úÖ Sistema agora exibe informa√ß√µes completas e profissionais")

# Verificar resultado final
cursor.execute('''
    SELECT COUNT(*) as total_rncs,
           SUM(CASE WHEN equipment LIKE '%aaa%' OR equipment LIKE '%teste%' THEN 1 ELSE 0 END) as invalid_equipment,
           SUM(CASE WHEN signature_engineering_name LIKE '%NOME%' THEN 1 ELSE 0 END) as invalid_signatures,
           SUM(CASE WHEN instruction_retrabalho LIKE '%TESTE:%' OR instruction_retrabalho IS NULL THEN 1 ELSE 0 END) as invalid_instructions
    FROM rncs
''')

stats = cursor.fetchone()
print(f"\n=== ESTAT√çSTICAS FINAIS ===")
print(f"Total de RNCs: {stats[0]}")
print(f"Equipment inv√°lidos: {stats[1]}")
print(f"Assinaturas inv√°lidas: {stats[2]}")
print(f"Instru√ß√µes inv√°lidas: {stats[3]}")

conn.close()
