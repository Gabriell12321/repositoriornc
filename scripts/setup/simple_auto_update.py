#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de atualiza√ß√£o autom√°tica simples
Sem depend√™ncias externas
"""

import time
import os
import sys
from datetime import datetime, timedelta

def run_update():
    """Executar atualiza√ß√£o"""
    
    print(f"\nüîÑ [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Executando atualiza√ß√£o...")
    
    try:
        # Executar script de atualiza√ß√£o
        os.system('python update_charts_and_reports.py')
        print("‚úÖ Atualiza√ß√£o conclu√≠da!")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def auto_update_loop(interval_minutes=30):
    """Loop de atualiza√ß√£o autom√°tica"""
    
    print("üöÄ Sistema de Atualiza√ß√£o Autom√°tica IPPEL")
    print(f"‚è∞ Intervalo: {interval_minutes} minutos")
    print("üõë Pressione Ctrl+C para parar")
    print("="*50)
    
    # Executar primeira atualiza√ß√£o
    run_update()
    
    # Calcular pr√≥ximo hor√°rio
    next_update = datetime.now() + timedelta(minutes=interval_minutes)
    
    while True:
        try:
            now = datetime.now()
            
            # Verificar se √© hora de atualizar
            if now >= next_update:
                run_update()
                next_update = now + timedelta(minutes=interval_minutes)
            
            # Mostrar pr√≥ximo hor√°rio a cada 5 minutos
            if now.minute % 5 == 0 and now.second < 10:
                print(f"‚è∞ Pr√≥xima atualiza√ß√£o: {next_update.strftime('%H:%M:%S')}")
            
            time.sleep(60)  # Aguardar 1 minuto
            
        except KeyboardInterrupt:
            print("\nüõë Sistema interrompido pelo usu√°rio")
            break

def manual_update():
    """Atualiza√ß√£o manual"""
    
    print("üîÑ Executando atualiza√ß√£o manual...")
    run_update()
    print("‚úÖ Conclu√≠do!")

def show_status():
    """Mostrar status"""
    
    print("üìä STATUS DO SISTEMA")
    print("="*40)
    
    files = [
        'ippel_system.db',
        'static/dashboard_data.json',
        'static/last_update.txt'
    ]
    
    for file_path in files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            modified = datetime.fromtimestamp(os.path.getmtime(file_path))
            print(f"‚úÖ {file_path}")
            print(f"   üìè {size:,} bytes")
            print(f"   üïí {modified.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print(f"‚ùå {file_path} - N√£o encontrado")
        print()

def main():
    """Fun√ß√£o principal"""
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'manual':
            manual_update()
        elif command == 'status':
            show_status()
        elif command == 'start':
            interval = 30  # Padr√£o 30 minutos
            if len(sys.argv) > 2:
                try:
                    interval = int(sys.argv[2])
                except ValueError:
                    print("‚ùå Intervalo inv√°lido!")
                    return
            auto_update_loop(interval)
        else:
            print("‚ùå Comando inv√°lido!")
            print("Comandos:")
            print("  python simple_auto_update.py manual     - Atualiza√ß√£o manual")
            print("  python simple_auto_update.py status     - Mostrar status")
            print("  python simple_auto_update.py start [30] - Iniciar autom√°tico (30min padr√£o)")
    else:
        print("üîÑ Sistema de Atualiza√ß√£o Autom√°tica IPPEL")
        print("="*50)
        print("Comandos dispon√≠veis:")
        print("  python simple_auto_update.py manual     - Executar atualiza√ß√£o manual")
        print("  python simple_auto_update.py status     - Mostrar status do sistema")
        print("  python simple_auto_update.py start [30] - Iniciar autom√°tico (30min padr√£o)")
        print()
        print("üí° Exemplo: python simple_auto_update.py start 60 (atualizar a cada 60 minutos)")

if __name__ == "__main__":
    main()
