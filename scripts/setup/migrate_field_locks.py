"""
Migra√ß√£o: Sistema de Bloqueio de Campos por Grupo
Criado em: 03/10/2025

Este script cria a tabela field_locks e estrutura necess√°ria
para o sistema de bloqueio de campos na cria√ß√£o de RNC.
"""

import sqlite3
import os
from datetime import datetime

DB_PATH = 'ippel_system.db'

def apply_migration():
    """Aplica a migra√ß√£o do sistema de bloqueio de campos"""
    
    print("=" * 70)
    print("MIGRA√á√ÉO: Sistema de Bloqueio de Campos por Grupo")
    print("=" * 70)
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"Banco: {DB_PATH}")
    print()
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå ERRO: Banco de dados n√£o encontrado: {DB_PATH}")
        return False
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("üìã Verificando estrutura atual...")
        
        # Verificar se a tabela j√° existe
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='field_locks'
        """)
        
        if cursor.fetchone():
            print("‚ö†Ô∏è  Tabela 'field_locks' j√° existe!")
            resposta = input("   Deseja recriar? (s/N): ").strip().lower()
            if resposta != 's':
                print("‚ùå Migra√ß√£o cancelada pelo usu√°rio.")
                conn.close()
                return False
            
            print("üóëÔ∏è  Removendo tabela antiga...")
            cursor.execute("DROP TABLE IF EXISTS field_locks")
        
        # Criar tabela field_locks
        print("\nüì¶ Criando tabela 'field_locks'...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS field_locks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                group_id INTEGER NOT NULL,
                field_name TEXT NOT NULL,
                is_locked INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (group_id) REFERENCES groups(id) ON DELETE CASCADE,
                UNIQUE(group_id, field_name)
            )
        """)
        print("   ‚úÖ Tabela criada!")
        
        # Criar √≠ndices
        print("\nüîç Criando √≠ndices...")
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_field_locks_group 
            ON field_locks(group_id)
        """)
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_field_locks_field 
            ON field_locks(field_name)
        """)
        print("   ‚úÖ √çndices criados!")
        
        # Criar trigger
        print("\n‚öôÔ∏è  Criando trigger de atualiza√ß√£o...")
        cursor.execute("""
            CREATE TRIGGER IF NOT EXISTS update_field_locks_timestamp 
            AFTER UPDATE ON field_locks
            BEGIN
                UPDATE field_locks 
                SET updated_at = CURRENT_TIMESTAMP 
                WHERE id = NEW.id;
            END
        """)
        print("   ‚úÖ Trigger criado!")
        
        # Listar grupos existentes
        print("\nüë• Grupos existentes no sistema:")
        cursor.execute("SELECT id, name FROM groups ORDER BY id")
        groups = cursor.fetchall()
        
        if not groups:
            print("   ‚ö†Ô∏è  Nenhum grupo encontrado!")
        else:
            for group in groups:
                print(f"   ‚Ä¢ ID {group[0]}: {group[1]}")
        
        # Perguntar se deseja adicionar bloqueios iniciais
        print("\n" + "=" * 70)
        print("CONFIGURA√á√ÉO INICIAL (OPCIONAL)")
        print("=" * 70)
        
        if groups:
            add_initial = input("\nDeseja adicionar bloqueios iniciais para algum grupo? (s/N): ").strip().lower()
            
            if add_initial == 's':
                # Campos dispon√≠veis para bloqueio
                available_fields = [
                    'title', 'description', 'equipment', 'client', 
                    'priority', 'status', 'responsavel', 'inspetor',
                    'setor', 'area_responsavel', 'price', 'assigned_user_id'
                ]
                
                print("\nüìã Campos dispon√≠veis para bloqueio:")
                for i, field in enumerate(available_fields, 1):
                    print(f"   {i:2d}. {field}")
                
                print("\nExemplo de configura√ß√£o:")
                print("  Para bloquear 'price' e 'priority' do grupo ID 2:")
                print("  Digite: 2:price,priority")
                print("\n  Para m√∫ltiplos grupos, separe por ponto-e-v√≠rgula:")
                print("  Digite: 2:price,priority;3:status,price")
                print()
                
                config = input("Configura√ß√£o (ou Enter para pular): ").strip()
                
                if config:
                    try:
                        # Parse configura√ß√£o: grupo_id:campo1,campo2;grupo_id:campo3
                        for group_config in config.split(';'):
                            if ':' not in group_config:
                                continue
                            
                            group_id, fields = group_config.split(':', 1)
                            group_id = int(group_id.strip())
                            fields_list = [f.strip() for f in fields.split(',')]
                            
                            for field in fields_list:
                                if field in available_fields:
                                    cursor.execute("""
                                        INSERT OR REPLACE INTO field_locks 
                                        (group_id, field_name, is_locked)
                                        VALUES (?, ?, 1)
                                    """, (group_id, field))
                                    print(f"   ‚úÖ Bloqueado '{field}' para grupo ID {group_id}")
                                else:
                                    print(f"   ‚ö†Ô∏è  Campo inv√°lido ignorado: '{field}'")
                    
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  Erro ao processar configura√ß√£o: {e}")
                        print("   Continuando sem bloqueios iniciais...")
        
        # Commit das mudan√ßas
        conn.commit()
        
        # Verificar resultado
        print("\n" + "=" * 70)
        print("RESULTADO")
        print("=" * 70)
        
        cursor.execute("SELECT COUNT(*) FROM field_locks")
        count = cursor.fetchone()[0]
        print(f"‚úÖ Migra√ß√£o aplicada com sucesso!")
        print(f"üìä Total de bloqueios configurados: {count}")
        
        if count > 0:
            print("\nüìã Bloqueios atuais:")
            cursor.execute("""
                SELECT g.name, fl.field_name, fl.is_locked
                FROM field_locks fl
                JOIN groups g ON fl.group_id = g.id
                ORDER BY g.name, fl.field_name
            """)
            for row in cursor.fetchall():
                status = "üîí Bloqueado" if row[2] else "üîì Liberado"
                print(f"   ‚Ä¢ {row[0]}: {row[1]} - {status}")
        
        print("\nüí° Pr√≥ximos passos:")
        print("   1. Acesse /admin/field-locks para configurar bloqueios")
        print("   2. Teste criando RNC com usu√°rios de diferentes grupos")
        print()
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO ao aplicar migra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False


def rollback_migration():
    """Remove a tabela field_locks (rollback)"""
    
    print("=" * 70)
    print("ROLLBACK: Remover Sistema de Bloqueio de Campos")
    print("=" * 70)
    
    resposta = input("‚ö†Ô∏è  ATEN√á√ÉO: Isso remover√° TODOS os bloqueios configurados!\nContinuar? (s/N): ").strip().lower()
    
    if resposta != 's':
        print("‚ùå Rollback cancelado.")
        return False
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("\nüóëÔ∏è  Removendo trigger...")
        cursor.execute("DROP TRIGGER IF EXISTS update_field_locks_timestamp")
        
        print("üóëÔ∏è  Removendo √≠ndices...")
        cursor.execute("DROP INDEX IF EXISTS idx_field_locks_group")
        cursor.execute("DROP INDEX IF EXISTS idx_field_locks_field")
        
        print("üóëÔ∏è  Removendo tabela...")
        cursor.execute("DROP TABLE IF EXISTS field_locks")
        
        conn.commit()
        conn.close()
        
        print("\n‚úÖ Rollback conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO ao fazer rollback: {e}")
        return False


if __name__ == '__main__':
    print("\nüîß MIGRA√á√ÉO DO BANCO DE DADOS")
    print("=" * 70)
    print("1. Aplicar migra√ß√£o (criar sistema de bloqueio)")
    print("2. Rollback (remover sistema de bloqueio)")
    print("3. Sair")
    print("=" * 70)
    
    escolha = input("\nEscolha uma op√ß√£o (1-3): ").strip()
    
    if escolha == '1':
        apply_migration()
    elif escolha == '2':
        rollback_migration()
    else:
        print("Opera√ß√£o cancelada.")
