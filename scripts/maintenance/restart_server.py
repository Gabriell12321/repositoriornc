#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
REINICIAR SERVIDOR: Aplicar corre√ß√µes
Script para parar e reiniciar o servidor com as corre√ß√µes
"""

import subprocess
import time
import os
import signal
import psutil

def find_python_server():
    """Encontrar processo do servidor Python"""
    print("üîç Procurando servidor Python...")
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] == 'python.exe':
                cmdline = ' '.join(proc.info['cmdline'])
                if 'server_form.py' in cmdline:
                    print(f"‚úÖ Servidor encontrado: PID {proc.info['pid']}")
                    return proc.info['pid']
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    print("‚ùå Servidor n√£o encontrado")
    return None

def stop_server(pid):
    """Parar servidor"""
    print(f"üõë Parando servidor (PID {pid})...")
    
    try:
        process = psutil.Process(pid)
        process.terminate()
        
        # Aguardar at√© 10 segundos para o processo terminar
        try:
            process.wait(timeout=10)
            print("‚úÖ Servidor parado com sucesso")
            return True
        except psutil.TimeoutExpired:
            print("‚ö†Ô∏è For√ßando parada do servidor...")
            process.kill()
            process.wait(timeout=5)
            print("‚úÖ Servidor for√ßado a parar")
            return True
            
    except psutil.NoSuchProcess:
        print("‚úÖ Servidor j√° estava parado")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao parar servidor: {e}")
        return False

def start_server():
    """Iniciar servidor"""
    print("üöÄ Iniciando servidor...")
    
    try:
        # Iniciar servidor em background
        process = subprocess.Popen(
            ['python', 'server_form.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0
        )
        
        print(f"‚úÖ Servidor iniciado (PID {process.pid})")
        print("‚è≥ Aguardando inicializa√ß√£o...")
        
        # Aguardar um pouco para o servidor inicializar
        time.sleep(3)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        return False

def test_server():
    """Testar se servidor est√° respondendo"""
    print("üß™ Testando servidor...")
    
    try:
        import requests
        response = requests.get("http://172.26.0.75:5001/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor respondendo corretamente")
            return True
        else:
            print(f"‚ö†Ô∏è Servidor respondeu com status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Servidor n√£o est√° respondendo: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîÑ REINICIANDO SERVIDOR PARA APLICAR CORRE√á√ïES")
    print("=" * 60)
    
    # 1. Encontrar servidor atual
    pid = find_python_server()
    
    if pid:
        # 2. Parar servidor
        if stop_server(pid):
            # Aguardar um pouco
            time.sleep(2)
            
            # 3. Iniciar servidor
            if start_server():
                # Aguardar inicializa√ß√£o
                time.sleep(5)
                
                # 4. Testar servidor
                if test_server():
                    print("\n" + "=" * 60)
                    print("‚úÖ SERVIDOR REINICIADO COM SUCESSO!")
                    print("\nüìã CORRE√á√ïES APLICADAS:")
                    print("   ‚úÖ Logo corrigido (404 ‚Üí OK)")
                    print("   ‚úÖ Endpoint RNC robusto")
                    print("   ‚úÖ Valida√ß√£o melhorada")
                    print("   ‚úÖ Tratamento de erros espec√≠fico")
                    print("\nüéØ TESTE AGORA:")
                    print("   1. Acesse: http://172.26.0.75:5001")
                    print("   2. Fa√ßa login: admin@ippel.com.br / admin123")
                    print("   3. Tente criar uma RNC")
                    print("=" * 60)
                else:
                    print("\n‚ùå Servidor n√£o est√° respondendo ap√≥s reinicializa√ß√£o")
            else:
                print("\n‚ùå Falha ao iniciar servidor")
        else:
            print("\n‚ùå Falha ao parar servidor")
    else:
        print("\nüí° Servidor n√£o estava rodando, iniciando...")
        if start_server():
            time.sleep(5)
            if test_server():
                print("\n‚úÖ SERVIDOR INICIADO COM SUCESSO!")
            else:
                print("\n‚ùå Servidor iniciado mas n√£o est√° respondendo")

if __name__ == "__main__":
    main()
