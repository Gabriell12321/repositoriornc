#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar e configurar permiss√µes de impress√£o de relat√≥rios
"""

import sqlite3
import sys
import os

# Adicionar o caminho do projeto
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def check_existing_permissions():
    """Verifica permiss√µes existentes no sistema"""
    try:
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        # Verificar permiss√µes existentes
        cursor.execute("SELECT DISTINCT permission_name FROM group_permissions ORDER BY permission_name")
        permissions = cursor.fetchall()
        
        print("üîç PERMISS√ïES EXISTENTES NO SISTEMA:")
        print("=" * 50)
        for perm in permissions:
            print(f"‚Ä¢ {perm[0]}")
        
        # Verificar grupos existentes
        cursor.execute("SELECT id, name FROM groups ORDER BY name")
        groups = cursor.fetchall()
        
        print("\nüë• GRUPOS EXISTENTES:")
        print("=" * 30)
        for group in groups:
            print(f"‚Ä¢ ID {group[0]}: {group[1]}")
        
        conn.close()
        return permissions, groups
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar permiss√µes: {e}")
        return [], []

def add_print_reports_permission():
    """Adiciona a permiss√£o de impress√£o de relat√≥rios"""
    try:
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        # Verificar se a permiss√£o j√° existe
        cursor.execute("SELECT COUNT(*) FROM group_permissions WHERE permission_name = 'can_print_reports'")
        exists = cursor.fetchone()[0]
        
        if exists > 0:
            print("‚úÖ A permiss√£o 'can_print_reports' j√° existe no sistema")
        else:
            # Adicionar permiss√£o para todos os grupos existentes (inicialmente desabilitada)
            cursor.execute("SELECT id, name FROM groups")
            groups = cursor.fetchall()
            
            for group_id, group_name in groups:
                cursor.execute("""
                    INSERT INTO group_permissions (group_id, permission_name, permission_value)
                    VALUES (?, 'can_print_reports', 0)
                """, (group_id,))
                print(f"‚ûï Permiss√£o 'can_print_reports' adicionada para o grupo '{group_name}' (desabilitada)")
            
            conn.commit()
            print("‚úÖ Permiss√£o 'can_print_reports' configurada com sucesso!")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao adicionar permiss√£o: {e}")
        return False

def enable_permission_for_group(group_id):
    """Habilita a permiss√£o de impress√£o para um grupo espec√≠fico"""
    try:
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        # Verificar se o grupo existe
        cursor.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
        group = cursor.fetchone()
        
        if not group:
            print(f"‚ùå Grupo com ID {group_id} n√£o encontrado")
            return False
        
        # Habilitar a permiss√£o
        cursor.execute("""
            UPDATE group_permissions 
            SET permission_value = 1 
            WHERE group_id = ? AND permission_name = 'can_print_reports'
        """, (group_id,))
        
        if cursor.rowcount > 0:
            conn.commit()
            print(f"‚úÖ Permiss√£o de impress√£o habilitada para o grupo '{group[0]}'")
            return True
        else:
            print(f"‚ö†Ô∏è Nenhuma permiss√£o foi atualizada para o grupo '{group[0]}'")
            return False
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao habilitar permiss√£o: {e}")
        return False

def show_permission_status():
    """Mostra o status atual das permiss√µes de impress√£o"""
    try:
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT g.id, g.name, 
                   COALESCE(gp.permission_value, 0) as can_print
            FROM groups g
            LEFT JOIN group_permissions gp ON g.id = gp.group_id 
                AND gp.permission_name = 'can_print_reports'
            ORDER BY g.name
        """)
        
        results = cursor.fetchall()
        
        print("\nüìä STATUS DAS PERMISS√ïES DE IMPRESS√ÉO:")
        print("=" * 50)
        for group_id, group_name, can_print in results:
            status = "‚úÖ HABILITADO" if can_print else "‚ùå DESABILITADO"
            print(f"‚Ä¢ Grupo {group_id} ({group_name}): {status}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar status: {e}")

def main():
    """Fun√ß√£o principal para configurar permiss√µes de impress√£o"""
    print("üîß CONFIGURADOR DE PERMISS√ïES - IMPRESS√ÉO DE RELAT√ìRIOS")
    print("=" * 60)
    
    # 1. Verificar permiss√µes existentes
    permissions, groups = check_existing_permissions()
    
    # 2. Adicionar a nova permiss√£o se n√£o existir
    add_print_reports_permission()
    
    # 3. Mostrar status atual
    show_permission_status()
    
    # 4. Oferecer op√ß√µes para habilitar
    print("\nüéõÔ∏è OP√á√ïES PARA HABILITAR PERMISS√ÉO:")
    print("Para habilitar a permiss√£o de impress√£o para um grupo espec√≠fico:")
    print("python configure_print_permissions.py --enable GROUP_ID")
    print("\nExemplo: python configure_print_permissions.py --enable 1")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--enable":
        if len(sys.argv) > 2:
            try:
                group_id = int(sys.argv[2])
                enable_permission_for_group(group_id)
                show_permission_status()
            except ValueError:
                print("‚ùå ID do grupo deve ser um n√∫mero")
        else:
            print("‚ùå Uso: python configure_print_permissions.py --enable GROUP_ID")
    else:
        main()
