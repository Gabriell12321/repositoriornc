# Arquivo de configuração Docker Compose para IPPEL RNC System
# Suporte a desenvolvimento, produção e monitoramento

version: '3.8'

services:
  # Aplicação Principal
  ippel-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ippel-rnc-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      # Dados persistentes
      - ippel-data:/app/data
      - ippel-logs:/app/logs
      - ippel-backups:/app/backups
      - ippel-uploads:/app/uploads
      # Configurações personalizadas
      - ./config_local.py:/app/config_local.py:ro
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY:-generate-secure-key}
      - DATABASE_PATH=/app/data/ippel_system.db
      - BACKUP_PATH=/app/backups
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
      # Configurações de email
      - SMTP_SERVER=${SMTP_SERVER:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    networks:
      - ippel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis-cache
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # Cache Redis para performance
  redis-cache:
    image: redis:7-alpine
    container_name: ippel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - ippel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx para proxy reverso e servir arquivos estáticos
  nginx-proxy:
    image: nginx:alpine
    container_name: ippel-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./static:/app/static:ro
      - nginx-logs:/var/log/nginx
      # SSL certificates (se disponíveis)
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - ippel-network
    depends_on:
      - ippel-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Sistema de monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ippel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - ippel-network
    profiles:
      - monitoring

  # Grafana para visualização de métricas
  grafana:
    image: grafana/grafana:latest
    container_name: ippel-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - ippel-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Backup automático
  backup-service:
    image: alpine:latest
    container_name: ippel-backup
    restart: unless-stopped
    volumes:
      - ippel-data:/app/data:ro
      - ippel-backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: |
      sh -c 'apk add --no-cache dcron sqlite &&
             echo "$${BACKUP_SCHEDULE} /backup.sh" > /var/spool/cron/crontabs/root &&
             crond -f -d 8'
    networks:
      - ippel-network
    profiles:
      - backup

# Volumes persistentes
volumes:
  ippel-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data
      o: bind
  ippel-logs:
    driver: local
  ippel-backups:
    driver: local
  ippel-uploads:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Rede isolada para os serviços
networks:
  ippel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
