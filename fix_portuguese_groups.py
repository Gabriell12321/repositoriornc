#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para corrigir erros de portugu√™s nos nomes dos grupos/setores
Uso: python fix_portuguese_groups.py
"""

import sqlite3
import os
import sys

# Configurar encoding UTF-8
sys.stdout.reconfigure(encoding='utf-8')

DB_PATH = 'ippel_system.db'

# Mapeamento de corre√ß√µes
CORRECTIONS = {
    # Formato: 'nome_errado_pattern': 'nome_correto'
    'N√£o Definidos': 'N√£o Definidos',  # J√° est√° correto
    'NÔøΩo Definidos': 'N√£o Definidos',
    'ProduÔøΩÔøΩo': 'Produ√ß√£o',
    'ProduÔøΩao': 'Produ√ß√£o',
    'Producao': 'Produ√ß√£o',
    'ProduÔøΩÔøΩo': 'Produ√ß√£o',
    'Usin. CilÔøΩndrica CNC': 'Usinagem Cil√≠ndrica CNC',
    'Usin. Cilindrica CNC': 'Usinagem Cil√≠ndrica CNC',
    'Usin. CilÔøΩndrica Convencional': 'Usinagem Cil√≠ndrica Convencional',
    'Usin. Cilindrica Convencional': 'Usinagem Cil√≠ndrica Convencional',
}

def fix_encoding(text):
    """Corrige problemas de encoding em texto"""
    if not text:
        return text
    
    # Dicion√°rio de substitui√ß√µes de caracteres mal codificados
    replacements = {
        'ÔøΩ': '√£',
        '√£': '√£',
        'ÔøΩ': '√µ',
        '√µ': '√µ',
        'ÔøΩ': '√°',
        '√°': '√°',
        'ÔøΩ': '√©',
        '√©': '√©',
        'ÔøΩ': '√≠',
        '√≠': '√≠',
        'ÔøΩ': '√≥',
        '√≥': '√≥',
        'ÔøΩ': '√∫',
        '√∫': '√∫',
        'ÔøΩ': '√¢',
        '√¢': '√¢',
        'ÔøΩ': '√™',
        '√™': '√™',
        'ÔøΩ': '√¥',
        '√¥': '√¥',
        'ÔøΩ': '√ß',
        '√ß': '√ß',
        '√É¬£': '√£',
        '√É¬ß': '√ß',
        '√É¬©': '√©',
        '√É¬≥': '√≥',
        '√É¬∫': '√∫',
    }
    
    result = text
    for wrong, correct in replacements.items():
        result = result.replace(wrong, correct)
    
    return result

def main():
    if not os.path.exists(DB_PATH):
        print(f"‚ùå Erro: Banco de dados '{DB_PATH}' n√£o encontrado!")
        print(f"   Certifique-se de estar na pasta correta do projeto.")
        return 1
    
    print(f"üìÇ Conectando ao banco: {DB_PATH}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Listar grupos atuais
    print("\nüìã GRUPOS ANTES DA CORRE√á√ÉO:")
    print("-" * 60)
    cursor.execute("SELECT id, name FROM groups ORDER BY name")
    groups_before = cursor.fetchall()
    
    for group_id, name in groups_before:
        print(f"  {group_id:3d} | {name}")
    
    # Fazer backup
    print(f"\nüíæ Fazendo backup da tabela groups...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS groups_backup_portuguese_fix AS 
        SELECT * FROM groups
    """)
    conn.commit()
    
    # Corrigir encoding e nomes
    print(f"\nüîß Aplicando corre√ß√µes...")
    corrections_made = 0
    
    cursor.execute("SELECT id, name FROM groups")
    all_groups = cursor.fetchall()
    
    for group_id, old_name in all_groups:
        new_name = fix_encoding(old_name)
        
        # Verificar mapeamento de corre√ß√µes
        for pattern, correct_name in CORRECTIONS.items():
            if pattern.lower() in new_name.lower() or pattern == new_name:
                new_name = correct_name
                break
        
        if new_name != old_name:
            print(f"  ‚úèÔ∏è  ID {group_id:3d}: '{old_name}' ‚Üí '{new_name}'")
            cursor.execute("UPDATE groups SET name = ? WHERE id = ?", (new_name, group_id))
            corrections_made += 1
    
    conn.commit()
    
    # Listar grupos ap√≥s corre√ß√£o
    print("\nüìã GRUPOS AP√ìS CORRE√á√ÉO:")
    print("-" * 60)
    cursor.execute("SELECT id, name FROM groups ORDER BY name")
    groups_after = cursor.fetchall()
    
    for group_id, name in groups_after:
        print(f"  {group_id:3d} | {name}")
    
    print(f"\n‚úÖ Corre√ß√µes aplicadas: {corrections_made}")
    print(f"üìä Total de grupos: {len(groups_after)}")
    print(f"üíæ Backup salvo em: groups_backup_portuguese_fix")
    
    conn.close()
    return 0

if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
