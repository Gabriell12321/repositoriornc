# GitHub Actions Workflow - IPPEL RNC System CI/CD
# Automa√ß√£o completa: testes, build, deploy e monitoramento

name: IPPEL RNC System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ippel/rnc-system

jobs:
  # Testes automatizados
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache depend√™ncias pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: An√°lise de c√≥digo com flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Executar testes
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # An√°lise de seguran√ßa
  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Instalar ferramentas de seguran√ßa
      run: |
        pip install safety bandit

    - name: Verificar vulnerabilidades em depend√™ncias
      run: safety check -r requirements.txt

    - name: An√°lise de seguran√ßa do c√≥digo
      run: bandit -r . -x tests/

    - name: Executar Trivy para an√°lise de vulnerabilidades
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload resultados Trivy para GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build da imagem Docker
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build e push da imagem
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy para ambiente de desenvolvimento
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Deploy para desenvolvimento
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_PORT }}
        script: |
          cd /app/ippel-rnc
          git pull origin develop
          ./scripts/deploy.sh deploy development --skip-tests
          docker system prune -f

    - name: Verificar health check
      run: |
        sleep 30
        curl -f ${{ secrets.DEV_URL }}/health || exit 1

    - name: Notificar sucesso
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '‚úÖ Deploy para desenvolvimento conclu√≠do com sucesso!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy para produ√ß√£o
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Deploy para produ√ß√£o
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          cd /app/ippel-rnc
          git pull origin main
          ./scripts/deploy.sh backup
          ./scripts/deploy.sh deploy production
          docker system prune -f

    - name: Executar testes de fuma√ßa
      run: |
        sleep 60
        curl -f ${{ secrets.PROD_URL }}/health || exit 1
        curl -f ${{ secrets.PROD_URL }}/api/status || exit 1

    - name: Configurar monitoramento
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /app/ippel-rnc
          docker-compose up -d prometheus grafana

    - name: Notificar sucesso no Slack
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          üöÄ Deploy para PRODU√á√ÉO conclu√≠do!
          
          ‚Ä¢ Vers√£o: ${{ github.sha }}
          ‚Ä¢ URL: ${{ secrets.PROD_URL }}
          ‚Ä¢ Monitoramento: ${{ secrets.PROD_URL }}:3000
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Criar release notes
      if: github.event_name == 'release'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Mudan√ßas nesta vers√£o
          
          ${{ github.event.release.body }}
          
          ## Informa√ß√µes do Deploy
          
          - **Data**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: ${{ github.sha }}
          - **Autor**: ${{ github.event.head_commit.author.name }}
          
          ## URLs
          
          - **Produ√ß√£o**: ${{ secrets.PROD_URL }}
          - **Monitoramento**: ${{ secrets.PROD_URL }}:3000
        draft: false
        prerelease: false

  # Testes de performance
  performance:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js para Lighthouse
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Instalar Lighthouse
      run: npm install -g lighthouse

    - name: Executar testes de performance
      run: |
        lighthouse ${{ secrets.DEV_URL }} --output=json --output-path=lighthouse.json
        
    - name: Upload resultados do Lighthouse
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results
        path: lighthouse.json

    - name: Executar testes de carga com Artillery
      run: |
        npm install -g artillery
        artillery quick --count 50 --num 5 ${{ secrets.DEV_URL }}

  # Limpeza de recursos
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
    - name: Limpar imagens Docker antigas
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
