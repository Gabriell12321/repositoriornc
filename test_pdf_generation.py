#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar a gera√ß√£o de PDFs
"""

import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_pdf_generation():
    """Testa a gera√ß√£o de PDFs"""
    
    try:
        print("üß™ Testando gera√ß√£o de PDFs...")
        
        # Importar o servi√ßo de PDF
        from services.pdf_generator import pdf_generator
        
        print("‚úÖ Servi√ßo de PDF importado com sucesso!")
        
        # Verificar se o banco existe
        if not os.path.exists('ippel_system.db'):
            print("‚ùå Banco de dados n√£o encontrado!")
            return
        
        print("‚úÖ Banco de dados encontrado!")
        
        # Testar conex√£o com o banco
        import sqlite3
        conn = sqlite3.connect('ippel_system.db')
        cursor = conn.cursor()
        
        # Verificar se h√° RNCs no banco
        cursor.execute('SELECT id, rnc_number FROM rncs WHERE is_deleted = 0 LIMIT 1')
        rnc = cursor.fetchone()
        conn.close()
        
        if not rnc:
            print("‚ùå Nenhuma RNC encontrada no banco!")
            return
        
        rnc_id, rnc_number = rnc
        print(f"‚úÖ RNC encontrada: {rnc_number} (ID: {rnc_id})")
        
        # Testar gera√ß√£o de PDF
        print("üîß Gerando PDF...")
        pdf_path = pdf_generator.generate_pdf(rnc_id)
        
        if pdf_path:
            print(f"‚úÖ PDF gerado com sucesso: {pdf_path}")
            
            # Verificar se o arquivo existe
            if os.path.exists(pdf_path):
                file_size = os.path.getsize(pdf_path)
                print(f"üìÅ Arquivo criado: {file_size} bytes")
                
                # Limpar arquivo de teste
                os.remove(pdf_path)
                print("üßπ Arquivo de teste removido")
            else:
                print("‚ùå Arquivo PDF n√£o foi criado")
        else:
            print("‚ùå Falha ao gerar PDF")
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üí° Verifique se as depend√™ncias est√£o instaladas")
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_pdf_generation()
