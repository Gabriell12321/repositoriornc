#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para testar diretamente a query SQL da API
"""

import sqlite3

# Configura√ß√µes
DB_PATH = "ippel_system.db"

def test_direct_query():
    """Testar a query SQL diretamente no banco"""
    print("üîç Testando query SQL diretamente no banco...")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Query exata que est√° sendo usada na API
        base_query = """
            SELECT 
                CASE 
                    WHEN r.signature_engineering_name IS NOT NULL AND r.signature_engineering_name != '' 
                    THEN r.signature_engineering_name
                    ELSE r.user_id
                END as owner_id,
                COUNT(r.id) as rnc_count
            FROM rncs r
            WHERE r.status IN ('Finalizado','finalized')
              AND r.is_deleted = 0
            GROUP BY owner_id
            ORDER BY rnc_count DESC
        """
        
        print("üîç Executando query:")
        print(base_query)
        
        cursor.execute(base_query)
        rnc_rows = cursor.fetchall()
        
        print(f"\nüìä Resultados da query:")
        print(f"   Total de linhas retornadas: {len(rnc_rows)}")
        
        # Mostrar as primeiras 20 linhas
        print(f"\nüìã Primeiras 20 linhas:")
        for i, (owner_id, count) in enumerate(rnc_rows[:20]):
            print(f"   {i+1:2d}. Owner ID: '{owner_id}' - RNCs: {count}")
        
        # Verificar se h√° owner_id NULL ou vazio
        null_owners = [row for row in rnc_rows if row[0] is None or row[0] == '']
        if null_owners:
            print(f"\n‚ö†Ô∏è Encontrados {len(null_owners)} owner_id NULL ou vazios")
        
        # Verificar se h√° owner_id com n√∫meros (user_id)
        numeric_owners = [row for row in rnc_rows if isinstance(row[0], int)]
        if numeric_owners:
            print(f"\nüî¢ Encontrados {len(numeric_owners)} owner_id num√©ricos (user_id)")
            print("   Exemplos:")
            for owner_id, count in numeric_owners[:5]:
                print(f"      User ID {owner_id}: {count} RNCs")
        
        # Verificar se h√° owner_id com strings (assinaturas)
        string_owners = [row for row in rnc_rows if isinstance(row[0], str) and row[0].strip()]
        if string_owners:
            print(f"\nüìù Encontrados {len(string_owners)} owner_id com strings (assinaturas)")
            print("   Exemplos:")
            for owner_id, count in string_owners[:10]:
                print(f"      '{owner_id}': {count} RNCs")
        
        # Verificar se a query est√° retornando dados corretos
        total_rncs_from_query = sum(row[1] for row in rnc_rows)
        print(f"\nüìä Total de RNCs retornadas pela query: {total_rncs_from_query}")
        
        # Verificar total real de RNCs finalizadas
        cursor.execute("""
            SELECT COUNT(*) FROM rncs 
            WHERE status IN ('Finalizado','finalized') AND is_deleted = 0
        """)
        total_real = cursor.fetchone()[0]
        print(f"üìä Total real de RNCs finalizadas: {total_real}")
        
        if total_rncs_from_query == total_real:
            print("‚úÖ Query est√° retornando o n√∫mero correto de RNCs!")
        else:
            print(f"‚ùå Query est√° retornando {total_rncs_from_query} RNCs, mas deveria retornar {total_real}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao testar query: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Testando query SQL diretamente no banco...")
    print(f"üóÑÔ∏è Banco de dados: {DB_PATH}")
    
    test_direct_query()
    
    print("\n‚ú® Teste conclu√≠do!")

if __name__ == "__main__":
    main()
