#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste r√°pido do servidor com CSP b√°sico configurado.
"""

from server_form import app
import time
import threading

def test_server_with_csp():
    """Testa o servidor com CSP configurado"""
    print("üöÄ TESTANDO SERVIDOR COM CSP B√ÅSICO")
    print("=" * 50)
    
    # Testar se o app carrega sem erros
    try:
        with app.test_client() as client:
            # Teste da p√°gina principal
            response = client.get('/')
            print(f"‚úÖ P√°gina principal: Status {response.status_code}")
            
            # Verificar headers CSP
            csp_header = response.headers.get('Content-Security-Policy')
            csp_ro_header = response.headers.get('Content-Security-Policy-Report-Only')
            
            if csp_header:
                print("‚úÖ Header CSP enforced encontrado")
                print(f"   {csp_header[:100]}...")
            else:
                print("‚ùå Header CSP enforced n√£o encontrado")
            
            if csp_ro_header:
                print("‚úÖ Header CSP Report-Only encontrado")
                print(f"   {csp_ro_header[:100]}...")
            else:
                print("‚ùå Header CSP Report-Only n√£o encontrado")
            
            # Teste do endpoint CSP report
            csp_report_response = client.post('/csp-report', 
                                              json={'test': 'violation'},
                                              content_type='application/csp-report')
            print(f"‚úÖ Endpoint /csp-report: Status {csp_report_response.status_code}")
            
            # Verificar outros headers de seguran√ßa
            security_headers = [
                'X-Frame-Options',
                'X-Content-Type-Options', 
                'Referrer-Policy',
                'X-XSS-Protection'
            ]
            
            print("\nüîí HEADERS DE SEGURAN√áA:")
            for header in security_headers:
                value = response.headers.get(header)
                if value:
                    print(f"  ‚úÖ {header}: {value}")
                else:
                    print(f"  ‚ö†Ô∏è  {header}: n√£o encontrado")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao testar servidor: {e}")
        return False

def create_sample_csp_violation():
    """Cria um exemplo de viola√ß√£o CSP para teste"""
    print("\nüìä EXEMPLO DE VIOLA√á√ÉO CSP:")
    print("-" * 30)
    
    sample_violation = {
        "csp-report": {
            "document-uri": "http://localhost:5000/dashboard",
            "referrer": "",
            "violated-directive": "script-src 'self'",
            "effective-directive": "script-src",
            "original-policy": "default-src 'self'; script-src 'self'",
            "disposition": "report",
            "blocked-uri": "inline",
            "line-number": 1,
            "column-number": 1,
            "source-file": "http://localhost:5000/dashboard",
            "status-code": 200,
            "script-sample": "onclick handler"
        }
    }
    
    print("  Exemplo de relat√≥rio que seria enviado para /csp-report:")
    print(f"  Diretiva violada: {sample_violation['csp-report']['violated-directive']}")
    print(f"  URI bloqueado: {sample_violation['csp-report']['blocked-uri']}")
    print(f"  Tipo: Script inline bloqueado pela pol√≠tica")

if __name__ == "__main__":
    success = test_server_with_csp()
    create_sample_csp_violation()
    
    if success:
        print("\nüéâ CONFIGURA√á√ÉO CSP B√ÅSICA TESTADA COM SUCESSO!")
        print("   ‚Ä¢ Headers CSP est√£o sendo enviados")
        print("   ‚Ä¢ Endpoint de relat√≥rios funcionando")
        print("   ‚Ä¢ Headers de seguran√ßa ativos")
        print("   ‚Ä¢ Sistema protegido contra XSS")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   ‚Ä¢ Iniciar servidor e monitorar logs/security.log")
        print("   ‚Ä¢ Verificar /admin/monitoring para viola√ß√µes")
        print("   ‚Ä¢ Planejar migra√ß√£o de scripts inline")
    else:
        print("\n‚ö†Ô∏è  VERIFICAR CONFIGURA√á√ÉO DO SERVIDOR!")
