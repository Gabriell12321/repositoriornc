#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste final da funcionalidade de impress√£o de relat√≥rios com permiss√µes
"""

import sqlite3
import sys
import os

# Adicionar o caminho do projeto
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from services.permissions import has_permission
    from services.db import DB_PATH
except ImportError:
    print("‚ö†Ô∏è M√≥dulos de servi√ßos n√£o encontrados - executando verifica√ß√£o b√°sica")
    has_permission = None
    DB_PATH = 'ippel_system.db'

def test_permission_system():
    """Testa o sistema de permiss√µes"""
    print("üîê TESTE DO SISTEMA DE PERMISS√ïES")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Verificar usu√°rios que t√™m a permiss√£o
        cursor.execute("""
            SELECT u.id, u.name, u.email, u.role, g.name as group_name,
                   COALESCE(gp.permission_value, 0) as can_print
            FROM users u
            LEFT JOIN groups g ON u.group_id = g.id
            LEFT JOIN group_permissions gp ON g.id = gp.group_id 
                AND gp.permission_name = 'can_print_reports'
            ORDER BY u.name
        """)
        
        users = cursor.fetchall()
        
        print("üë• USU√ÅRIOS E SUAS PERMISS√ïES DE IMPRESS√ÉO:")
        print("-" * 60)
        for user in users:
            user_id, name, email, role, group_name, can_print = user
            status = "‚úÖ PERMITIDO" if can_print else "‚ùå NEGADO"
            print(f"‚Ä¢ {name} ({email})")
            print(f"  Grupo: {group_name or 'Sem grupo'} | Role: {role}")
            print(f"  Permiss√£o: {status}")
            print()
        
        # Verificar se h√° usu√°rios administradores
        admin_users = [u for u in users if u[5] == 1]  # can_print = 1
        if admin_users:
            print(f"‚úÖ {len(admin_users)} usu√°rio(s) com permiss√£o de impress√£o")
            print("üìù Usu√°rios que podem ver o bot√£o 'Imprimir Relat√≥rio':")
            for user in admin_users:
                print(f"   ‚Ä¢ {user[1]} ({user[4]})")
        else:
            print("‚ö†Ô∏è Nenhum usu√°rio tem permiss√£o de impress√£o habilitada")
            print("üí° Use: python configure_print_permissions.py --enable GROUP_ID")
        
        conn.close()
        return len(admin_users) > 0
        
    except Exception as e:
        print(f"‚ùå Erro ao testar permiss√µes: {e}")
        return False

def test_files_structure():
    """Testa se todos os arquivos necess√°rios existem"""
    print("\nüìÅ TESTE DA ESTRUTURA DE ARQUIVOS")
    print("=" * 50)
    
    required_files = [
        'routes/print_reports.py',
        'templates/reports/print_detailed.html',
        'templates/reports/print_summary.html',
        'templates/reports/print_charts.html',
        'templates/dashboard_improved.html'
    ]
    
    all_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - AUSENTE!")
            all_exist = False
    
    return all_exist

def test_dashboard_integration():
    """Testa se o dashboard tem a integra√ß√£o correta"""
    print("\nüéõÔ∏è TESTE DA INTEGRA√á√ÉO DO DASHBOARD")
    print("=" * 50)
    
    try:
        with open('templates/dashboard_improved.html', 'r', encoding='utf-8') as f:
            dashboard_content = f.read()
        
        checks = [
            ('canPrintReports', 'Verifica√ß√£o de permiss√£o no template'),
            ('showPrintReportModal', 'Fun√ß√£o JavaScript do modal'),
            ('üñ®Ô∏è Imprimir Relat√≥rio', 'Texto do bot√£o'),
            ('printReportModal', 'ID do modal'),
        ]
        
        all_passed = True
        for check_text, description in checks:
            if check_text in dashboard_content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description} - N√ÉO ENCONTRADO!")
                all_passed = False
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar dashboard: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE COMPLETO - IMPRESS√ÉO DE RELAT√ìRIOS COM PERMISS√ïES")
    print("=" * 70)
    
    # Executar todos os testes
    test_results = [
        test_files_structure(),
        test_dashboard_integration(),
        test_permission_system()
    ]
    
    # Resultado final
    print("\n" + "=" * 70)
    if all(test_results):
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de impress√£o de relat√≥rios implementado e configurado")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Reiniciar o servidor Flask")
        print("2. Fazer login com usu√°rio que tem permiss√£o")
        print("3. Verificar se o bot√£o 'Imprimir Relat√≥rio' aparece nas A√ß√µes R√°pidas")
        print("4. Testar a funcionalidade")
        print("\nüéØ PARA HABILITAR MAIS GRUPOS:")
        print("python configure_print_permissions.py --enable GROUP_ID")
        print("Exemplo: python configure_print_permissions.py --enable 2  # Qualidade")
    else:
        failed_tests = ["Estrutura de arquivos", "Integra√ß√£o dashboard", "Sistema de permiss√µes"]
        failed = [test for i, test in enumerate(failed_tests) if not test_results[i]]
        print("‚ùå ALGUNS TESTES FALHARAM:")
        for test in failed:
            print(f"   ‚Ä¢ {test}")
        print("\n‚ö†Ô∏è Corrija os problemas antes de usar o sistema")

if __name__ == "__main__":
    main()
