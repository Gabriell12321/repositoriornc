#!/usr/bin/env python3
"""
Script para recriar a tabela field_locks com a estrutura correta
"""

import sqlite3
import os
from datetime import datetime

DB_PATH = 'ippel_system.db'

def recreate_field_locks_table():
    """Recria a tabela field_locks com estrutura correta"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("=" * 60)
        print("üîß Recriando tabela field_locks")
        print("=" * 60)
        
        # 1. Fazer backup dos dados existentes
        print("\n1Ô∏è‚É£ Fazendo backup dos dados...")
        cursor.execute("SELECT * FROM field_locks")
        backup_data = cursor.fetchall()
        print(f"   ‚úÖ {len(backup_data)} registros salvos em mem√≥ria")
        
        # 2. Renomear tabela antiga
        print("\n2Ô∏è‚É£ Renomeando tabela antiga...")
        cursor.execute("ALTER TABLE field_locks RENAME TO field_locks_old")
        conn.commit()
        print("   ‚úÖ Tabela renomeada para field_locks_old")
        
        # 3. Criar nova tabela com estrutura correta
        print("\n3Ô∏è‚É£ Criando nova tabela field_locks...")
        cursor.execute("""
            CREATE TABLE field_locks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                group_id INTEGER NOT NULL,
                field_name TEXT NOT NULL,
                is_locked BOOLEAN DEFAULT 0,
                is_required BOOLEAN DEFAULT 0,
                context TEXT DEFAULT 'creation',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(group_id, field_name, context),
                FOREIGN KEY (group_id) REFERENCES groups(id) ON DELETE CASCADE
            )
        """)
        conn.commit()
        print("   ‚úÖ Nova tabela criada com UNIQUE(group_id, field_name, context)")
        
        # 4. Criar √≠ndices
        print("\n4Ô∏è‚É£ Criando √≠ndices...")
        cursor.execute("CREATE INDEX idx_field_locks_context ON field_locks(context)")
        cursor.execute("CREATE INDEX idx_field_locks_group_context ON field_locks(group_id, context)")
        cursor.execute("CREATE INDEX idx_field_locks_field_name ON field_locks(field_name)")
        cursor.execute("CREATE INDEX idx_field_locks_group_id ON field_locks(group_id)")
        conn.commit()
        print("   ‚úÖ √çndices criados!")
        
        # 5. Restaurar dados
        print("\n5Ô∏è‚É£ Restaurando dados...")
        
        # Verificar se os dados j√° t√™m a coluna context
        cursor.execute("PRAGMA table_info(field_locks_old)")
        old_columns = [col[1] for col in cursor.fetchall()]
        has_context = 'context' in old_columns
        
        if has_context:
            # Dados j√° t√™m context, copiar diretamente
            cursor.execute("""
                INSERT INTO field_locks (id, group_id, field_name, is_locked, is_required, context, created_at, updated_at)
                SELECT id, group_id, field_name, is_locked, is_required, context, created_at, updated_at
                FROM field_locks_old
            """)
        else:
            # Dados n√£o t√™m context, adicionar 'creation' como padr√£o
            cursor.execute("""
                INSERT INTO field_locks (id, group_id, field_name, is_locked, is_required, context, created_at, updated_at)
                SELECT id, group_id, field_name, is_locked, is_required, 'creation', created_at, updated_at
                FROM field_locks_old
            """)
            
            # Duplicar para 'response'
            cursor.execute("""
                INSERT INTO field_locks (group_id, field_name, is_locked, is_required, context, created_at, updated_at)
                SELECT group_id, field_name, is_locked, is_required, 'response', created_at, updated_at
                FROM field_locks_old
            """)
        
        conn.commit()
        
        # Verificar quantos registros foram restaurados
        cursor.execute("SELECT COUNT(*) FROM field_locks")
        new_count = cursor.fetchone()[0]
        print(f"   ‚úÖ {new_count} registros restaurados")
        
        # 6. Verificar por contexto
        print("\n6Ô∏è‚É£ Verificando registros por contexto...")
        cursor.execute("SELECT context, COUNT(*) FROM field_locks GROUP BY context")
        for context, count in cursor.fetchall():
            print(f"   - {context}: {count} registros")
        
        # 7. Dropar tabela antiga
        print("\n7Ô∏è‚É£ Removendo tabela antiga...")
        cursor.execute("DROP TABLE field_locks_old")
        conn.commit()
        print("   ‚úÖ Tabela antiga removida")
        
        conn.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ Tabela recriada com sucesso!")
        print("=" * 60)
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        
        # Tentar reverter
        try:
            cursor.execute("DROP TABLE IF EXISTS field_locks")
            cursor.execute("ALTER TABLE field_locks_old RENAME TO field_locks")
            conn.commit()
            print("\n‚ö†Ô∏è  Mudan√ßas revertidas!")
        except:
            pass
        
        return False

if __name__ == "__main__":
    print("\n" + "üîê " * 20)
    print("   RECRIAR TABELA: field_locks")
    print("üîê " * 20 + "\n")
    
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° recriar a tabela field_locks!")
    print("   - Backup dos dados ser√° feito automaticamente")
    print("   - A tabela ser√° recriada com a estrutura correta")
    print("   - Registros ser√£o duplicados para contextos creation/response")
    print()
    
    response = input("Deseja continuar? (s/N): ")
    
    if response.lower() == 's':
        success = recreate_field_locks_table()
        if success:
            print("\nüéâ Opera√ß√£o conclu√≠da com sucesso!")
            print("   Agora voc√™ pode usar o sistema de permiss√µes normalmente.")
    else:
        print("\n‚ùå Opera√ß√£o cancelada")
