#!/usr/bin/env python3
"""
Script para aplicar migra√ß√£o de contextos ao sistema de field locks
Adiciona suporte para permiss√µes separadas de Cria√ß√£o e Resposta
"""

import sqlite3
import os
from datetime import datetime

# Caminho do banco de dados
DB_PATH = 'ippel_system.db'
MIGRATION_FILE = 'migrations/add_context_to_field_locks.sql'

def apply_migration():
    """Aplica a migra√ß√£o de contextos na tabela field_locks"""
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå Erro: Banco de dados n√£o encontrado: {DB_PATH}")
        return False
    
    if not os.path.exists(MIGRATION_FILE):
        print(f"‚ùå Erro: Arquivo de migra√ß√£o n√£o encontrado: {MIGRATION_FILE}")
        return False
    
    print("=" * 60)
    print("üîÑ Aplicando Migra√ß√£o: Contextos de Field Locks")
    print("=" * 60)
    
    try:
        # Conectar ao banco
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Verificar se a coluna j√° existe
        cursor.execute("PRAGMA table_info(field_locks)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'context' in columns:
            print("‚ö†Ô∏è  Coluna 'context' j√° existe na tabela field_locks")
            
            # Verificar quantos registros existem por contexto
            cursor.execute("SELECT context, COUNT(*) FROM field_locks GROUP BY context")
            results = cursor.fetchall()
            
            print("\nüìä Registros atuais por contexto:")
            for context, count in results:
                print(f"   - {context}: {count} registros")
            
            response = input("\nü§î Deseja recriar os registros de 'response'? (s/N): ")
            if response.lower() != 's':
                print("‚úÖ Migra√ß√£o cancelada - banco j√° est√° atualizado")
                conn.close()
                return True
        
        # Ler o arquivo SQL
        with open(MIGRATION_FILE, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        print("\nüìã Executando migra√ß√£o...")
        
        # Executar o script SQL
        cursor.executescript(sql_script)
        
        # Verificar resultados
        cursor.execute("SELECT context, COUNT(*) FROM field_locks GROUP BY context")
        results = cursor.fetchall()
        
        print("\n‚úÖ Migra√ß√£o aplicada com sucesso!")
        print("\nüìä Registros finais por contexto:")
        for context, count in results:
            emoji = "üÜï" if context == "creation" else "üìù"
            print(f"   {emoji} {context.upper()}: {count} registros")
        
        # Commit e fechar
        conn.commit()
        conn.close()
        
        print("\n" + "=" * 60)
        print("‚ú® Sistema agora suporta permiss√µes separadas!")
        print("   üÜï CREATION - Permiss√µes ao criar novo RNC")
        print("   üìù RESPONSE - Permiss√µes ao responder/editar RNC")
        print("=" * 60)
        
        return True
        
    except sqlite3.Error as e:
        print(f"\n‚ùå Erro ao aplicar migra√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return False

def rollback_migration():
    """Reverte a migra√ß√£o (remove coluna context)"""
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Isto ir√° remover a coluna 'context' e mesclar todas as permiss√µes!")
    response = input("Deseja continuar? (s/N): ")
    
    if response.lower() != 's':
        print("‚úÖ Rollback cancelado")
        return False
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("\nüîÑ Revertendo migra√ß√£o...")
        
        # SQLite n√£o suporta DROP COLUMN diretamente, ent√£o precisamos recriar a tabela
        cursor.execute("""
            CREATE TABLE field_locks_backup AS
            SELECT DISTINCT group_id, field_name, is_locked, created_at, updated_at
            FROM field_locks
            WHERE context = 'creation'
        """)
        
        cursor.execute("DROP TABLE field_locks")
        cursor.execute("ALTER TABLE field_locks_backup RENAME TO field_locks")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Migra√ß√£o revertida com sucesso!")
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå Erro ao reverter migra√ß√£o: {e}")
        return False

if __name__ == "__main__":
    print("\n" + "üîê " * 20)
    print("   MIGRA√á√ÉO: Sistema de Contextos para Field Locks")
    print("üîê " * 20 + "\n")
    
    print("Op√ß√µes:")
    print("  1. Aplicar migra√ß√£o (adicionar contextos)")
    print("  2. Reverter migra√ß√£o (remover contextos)")
    print("  3. Cancelar")
    
    choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
    
    if choice == "1":
        success = apply_migration()
        exit(0 if success else 1)
    elif choice == "2":
        success = rollback_migration()
        exit(0 if success else 1)
    else:
        print("‚úÖ Opera√ß√£o cancelada")
        exit(0)
